<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.fellow.dao.UserSkillMapper">

    <resultMap id="UserSkill" type="com.fellow.domain.model.UserSkill">
        <result property="id" column="id"/>
        <result property="account" column="account"/>
        <result property="skillId" column="skill_id"/>
        <!--<result property="skillNum" column="skill_num"/>-->
        <result property="createAccount" column="create_account"/>
        <result property="createName" column="create_name"/>
        <result property="createTime" column="create_time"/>
        <result property="updateAccount" column="update_account"/>
        <result property="updateName" column="update_name"/>
        <result property="updateTime" column="update_time"/>
        <result property="sysVersion" column="sys_version"/>
        <result property="isDelete" column="is_delete"/>
        <result property="ts" column="ts"/>
    </resultMap>

    <sql id="columns">
        id,account,skill_id,create_account,create_name,create_time,update_account,update_name,update_time,sys_version,is_delete,ts
    </sql>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user_skill (
        account,
        skill_id,
--         skill_num,
        create_account,
        create_name,
        create_time,
        update_account,
        update_name,
        update_time,
        sys_version,
        is_delete

        ) VALUES (
        #{account},
        #{skillId},
        #{skillNum},
        #{createAccount},
        #{createName},
        now(),
        #{updateAccount},
        #{updateName},
        #{updateTime},
        1,
        0

        )
    </insert>

    <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user_skill (
        <if test="@Ognl@isNotEmpty(account)">
            account,
        </if>
        <if test="@Ognl@isNotEmpty(skillId)">
            skill_id,
        </if>
        <!--<if test="@Ognl@isNotEmpty(skillNum)">-->
            <!--skill_num,-->
        <!--</if>-->
        <if test="@Ognl@isNotEmpty(createAccount)">
            create_account,
        </if>
        <if test="@Ognl@isNotEmpty(createName)">
            create_name,
        </if>
        create_time,
        <if test="@Ognl@isNotEmpty(updateAccount)">
            update_account,
        </if>
        <if test="@Ognl@isNotEmpty(updateName)">
            update_name,
        </if>
        <if test="@Ognl@isNotEmpty(updateTime)">
            update_time,
        </if>
        sys_version,
        is_delete
        ) VALUES (
        <if test="@Ognl@isNotEmpty(account)">
            #{account},
        </if>
        <if test="@Ognl@isNotEmpty(skillId)">
            #{skillId},
        </if>
        <if test="@Ognl@isNotEmpty(skillNum)">
            #{skillNum},
        </if>
        <if test="@Ognl@isNotEmpty(createAccount)">
            #{createAccount},
        </if>
        <if test="@Ognl@isNotEmpty(createName)">
            #{createName},
        </if>
        now(),
        <if test="@Ognl@isNotEmpty(updateAccount)">
            #{updateAccount},
        </if>
        <if test="@Ognl@isNotEmpty(updateName)">
            #{updateName},
        </if>
        <if test="@Ognl@isNotEmpty(updateTime)">
            #{updateTime},
        </if>
        1,
        0
        )
    </insert>

    <update id="update" >
        UPDATE user_skill SET
        <if test="@Ognl@isNotEmpty(account)">
            account = #{account},
        </if>
        <if test="@Ognl@isNotEmpty(skillId)">
            skill_id = #{skillId},
        </if>
        <!--<if test="@Ognl@isNotEmpty(skillNum)">-->
            <!--skill_num = #{skillNum},-->
        <!--</if>-->
        <if test="@Ognl@isNotEmpty(createAccount)">
            create_account = #{createAccount},
        </if>
        <if test="@Ognl@isNotEmpty(createName)">
            create_name = #{createName},
        </if>
        <if test="@Ognl@isNotEmpty(createTime)">
            create_time = #{createTime},
        </if>
        <if test="@Ognl@isNotEmpty(updateAccount)">
            update_account = #{updateAccount},
        </if>
        <if test="@Ognl@isNotEmpty(updateName)">
            update_name = #{updateName},
        </if>
        <if test="@Ognl@isNotEmpty(updateTime)">
            update_time = now(),
        </if>
        <if test="@Ognl@isNotEmpty(sysVersion)">
            sys_version = CASE WHEN sys_version IS NULL THEN 0 ELSE sys_version + 1 END,
        </if>
        <if test="@Ognl@isNotEmpty(isDelete)">
            is_delete = #{isDelete}
        </if>
        WHERE
        id = #{id}
    </update>

    <update id="updateByOptimisticLock" >
        UPDATE user_skill
        SET
        <if test="@Ognl@isNotEmpty(account)">
            account = #{account},
        </if>
        <if test="@Ognl@isNotEmpty(skillId)">
            skill_id = #{skillId},
        </if>
        <!--<if test="@Ognl@isNotEmpty(skillNum)">-->
            <!--skill_num = #{skillNum},-->
        <!--</if>-->
        <if test="@Ognl@isNotEmpty(createAccount)">
            create_account = #{createAccount},
        </if>
        <if test="@Ognl@isNotEmpty(createName)">
            create_name = #{createName},
        </if>
        <if test="@Ognl@isNotEmpty(createTime)">
            create_time = #{createTime},
        </if>
        <if test="@Ognl@isNotEmpty(isDelete)">
            is_delete = #{isDelete},
        </if>
        update_account =#{updateAccount} ,
        update_name = #{updateName} ,
        update_time = now(),
        sys_version = sys_version + 1
        WHERE
        sys_version = #{sysVersion, jdbcType=INTEGER}
        AND id = #{id}
    </update>

    <delete id="delete">
        UPDATE user_skill
        SET is_delete = 1
        <if test="@Ognl@isNotEmpty(updateAccount)">
            update_account = #{updateAccount} ,
        </if>
        <if test="@Ognl@isNotEmpty(updateName)">
            update_name = #{updateName} ,
        </if>
        update_time = now(),
        sys_version = sys_version + 1
        WHERE
        id = #{id}
    </delete>

    <delete id="deletePhysical">
        DELETE
        FROM user_skill
        WHERE
        id = #{id}
    </delete>

    <select id="getByKey" resultMap="UserSkill">
        SELECT <include refid="columns" />
        FROM user_skill
        WHERE
        id = #{id}
    </select>

    <select id="findList" resultMap="UserSkill">
        SELECT <include refid="columns" />
        FROM user_skill
        <include refid="findList_where"/>
        <if test="@Ognl@isNotEmpty(sortColumns)">
            ORDER BY ${sortColumns}
        </if>
    </select>

    <select id="findListCount" resultType="int">
        SELECT count(1)
        FROM user_skill
        <include refid="findList_where"/>
    </select>

    <sql id="findList_where">
        <where>
            <if test="@Ognl@isNotEmpty(id)">
                AND id = #{id}
            </if>
            <if test="@Ognl@isNotEmpty(account)">
                AND account = #{account}
            </if>
            <if test="@Ognl@isNotEmpty(skillId)">
                AND skill_id = #{skillId}
            </if>
            <!--<if test="@Ognl@isNotEmpty(skillNum)">-->
                <!--AND skill_num = #{skillNum}-->
            <!--</if>-->
            <if test="@Ognl@isNotEmpty(createAccount)">
                AND create_account = #{createAccount}
            </if>
            <if test="@Ognl@isNotEmpty(createName)">
                AND create_name = #{createName}
            </if>
            <if test="@Ognl@isNotEmpty(createTimeBegin)">
                AND create_time &gt;= #{createTimeBegin}
            </if>
            <if test="@Ognl@isNotEmpty(createTimeEnd)">
                AND create_time &lt;= #{createTimeEnd}
            </if>
            <if test="@Ognl@isNotEmpty(updateAccount)">
                AND update_account = #{updateAccount}
            </if>
            <if test="@Ognl@isNotEmpty(updateName)">
                AND update_name = #{updateName}
            </if>
            <if test="@Ognl@isNotEmpty(updateTimeBegin)">
                AND update_time &gt;= #{updateTimeBegin}
            </if>
            <if test="@Ognl@isNotEmpty(updateTimeEnd)">
                AND update_time &lt;= #{updateTimeEnd}
            </if>
            <if test="@Ognl@isNotEmpty(sysVersion)">
                AND sys_version = #{sysVersion}
            </if>
            <choose>
                <when test="@Ognl@isNotEmpty(isDelete)">
                    AND is_delete = #{isDelete}
                </when>
                <otherwise>
                    AND is_delete = 0
                </otherwise>
            </choose>
        </where>
    </sql>

    <select id="selectPersonalSkill" resultMap="UserSkill">
        SELECT
            id,
            skill_id
--             ,
--             skill_num
        FROM
            user_skill
        WHERE
            is_delete  = 0
           AND account = #{account}
    </select>

    <update id="updatePersonalSkill">
        UPDATE user_skill
        SET
--             skill_num = #{skillNum},
            update_account = #{updateAccount},
            update_name = #{updateName},
            update_time = now(),
            sys_version = sys_version + 1
        WHERE
            is_delete  = 0
           AND account = #{account}
           AND id = #{id}
    </update>

    <update id="deleteSkillsByAccount">
        UPDATE user_skill
        SET
        is_delete  = 1
        WHERE
            is_delete  = 0
           AND account = #{account}
        <if test="@Ognl@isNotEmpty(idList)">
            AND id NOT IN
            <foreach collection="idList" item="idTemp" open="(" separator="," close=")">
                #{idTemp}
            </foreach>
        </if>
    </update>

</mapper>